using ExcelToOutlook.ViewModel.Dialogs;
using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;

namespace ExcelToOutlook.View.Dialogs
{
    /// <summary>
    /// Interaction logic for ExcelDialog.xaml
    /// </summary>
    public partial class ExcelDialog : Window
    {
        public ExcelDialog(DataTable dataTable, int dateindex)
        {
            DataContext = new ExcelDialogViewModel(DataGrid, dataTable, dateindex);
            InitializeComponent();
        }

        private void Button_Click(object sender, RoutedEventArgs e) => DialogResult = true;

        private void DataGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            e.Row.Header = e.Row.GetIndex() + 1;
        }

        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var IsSelected = ((ExcelDialogViewModel)DataContext).IsSelected;
            var ColumnColor = ((ExcelDialogViewModel)DataContext).ColumnColor;

            IsSelected.Clear();
            ColumnColor.Clear();

            RelativeSource RelativeSource = new RelativeSource(RelativeSourceMode.FindAncestor) { AncestorType = GetType() };
            var context = (ExcelDialogViewModel)DataContext;

            for (int i = 0; i < DataGrid.Columns.Count; i++)
            {
                IsSelected.Add(false);
                if (i == context.DateColumnIndex)
                {
                    context.Mode = 1;
                    context.Label = "Please select your schedule column";
                    ColumnColor.Add(context.DateColumnColor);
                }
                else
                {
                    ColumnColor.Add(Brushes.White);
                }

                DataGrid.Columns[i].CellStyle = new Style
                {
                    TargetType = typeof(DataGridCell),
                    Setters =
                        {
                            new Setter
                            {
                                Property = DataGridCell.IsSelectedProperty,
                                Value = new Binding(string.Format("DataContext.IsSelected[{0}]", i))
                                { RelativeSource = RelativeSource, Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged },
                            },
                            new Setter
                            {
                                Property = DataGridCell.BackgroundProperty,
                                Value = new Binding(string.Format("DataContext.ColumnColor[{0}]", i))
                                { RelativeSource = RelativeSource, Mode = BindingMode.Default, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged },
                            }
                        },
                };
            }
        }
    }
}
